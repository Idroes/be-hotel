/// <reference types="jest" />
/// <reference types="node" />
/**
 * Helper function to create a mock of the Node.js method
 * `process.exit(code: number)`.
 *
 * @param {Object} err Optional error to raise. If unspecified or falsy, calling `process.exit` will resume code
 * execution instead of raising an error.
 */
export declare function mockProcessExit(err?: any): jest.SpyInstance<(code?: number) => never, any>;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stdout.write(text: string, callback?: function): boolean`.
 */
export declare function mockProcessStdout(): jest.SpyInstance<(buffer: string | Buffer, encoding?: string, cb?: Function) => boolean, any>;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stderr.write(text: string, callback?: function): boolean`.
 */
export declare function mockProcessStderr(): jest.SpyInstance<(buffer: string | Buffer, encoding?: string, cb?: Function) => boolean, any>;
/**
 * Helper function to create a mock of the Node.js method
 * `console.log(message: any)`.
 */
export declare function mockConsoleLog(): jest.SpyInstance<(message?: any, ...optionalParams: any[]) => void, any>;
