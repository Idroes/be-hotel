"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper function to create a mock of the Node.js method
 * `process.exit(code: number)`.
 *
 * @param {Object} err Optional error to raise. If unspecified or falsy, calling `process.exit` will resume code
 * execution instead of raising an error.
 */
function mockProcessExit(err) {
    var processExit = process.exit;
    if (processExit.mockRestore) {
        processExit.mockRestore();
    }
    var spyImplementation;
    if (err) {
        spyImplementation = jest.spyOn(process, 'exit')
            .mockImplementation(function (_) { throw err; });
    }
    else {
        spyImplementation = jest.spyOn(process, 'exit')
            .mockImplementation(function (_) { });
    }
    return spyImplementation;
}
exports.mockProcessExit = mockProcessExit;
;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stdout.write(text: string, callback?: function): boolean`.
 */
function mockProcessStdout() {
    var processStdout = process.stdout.write;
    if (processStdout.mockRestore) {
        processStdout.mockRestore();
    }
    var spyImplementation;
    spyImplementation = jest.spyOn(process.stdout, 'write')
        .mockImplementation(function () { return true; });
    return spyImplementation;
}
exports.mockProcessStdout = mockProcessStdout;
;
/**
 * Helper function to create a mock of the Node.js method
 * `process.stderr.write(text: string, callback?: function): boolean`.
 */
function mockProcessStderr() {
    var processStderr = process.stderr.write;
    if (processStderr.mockRestore) {
        processStderr.mockRestore();
    }
    var spyImplementation;
    spyImplementation = jest.spyOn(process.stderr, 'write')
        .mockImplementation(function () { return true; });
    return spyImplementation;
}
exports.mockProcessStderr = mockProcessStderr;
;
/**
 * Helper function to create a mock of the Node.js method
 * `console.log(message: any)`.
 */
function mockConsoleLog() {
    var consoleLog = console.log;
    if (consoleLog.mockRestore) {
        consoleLog.mockRestore();
    }
    var spyImplementation;
    spyImplementation = jest.spyOn(console, 'log')
        .mockImplementation(function () { });
    return spyImplementation;
}
exports.mockConsoleLog = mockConsoleLog;
;
